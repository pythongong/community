/*
 * This file is generated by jOOQ.
 */
package com.pythongong.community.user.model.tables.records;


import com.pythongong.community.user.model.tables.CommunityUser;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;


/**
 * Stores information about registered users of the application.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommunityUserRecord extends UpdatableRecordImpl<CommunityUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>user_management.community_user.id</code>. Unique
     * auto-incrementing integer identifier for each user
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>user_management.community_user.id</code>. Unique
     * auto-incrementing integer identifier for each user
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>user_management.community_user.create_time</code>.
     * Timestamp of user record creation
     */
    public void setCreateTime(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>user_management.community_user.create_time</code>.
     * Timestamp of user record creation
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>user_management.community_user.update_time</code>.
     * Timestamp of last user record update
     */
    public void setUpdateTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>user_management.community_user.update_time</code>.
     * Timestamp of last user record update
     */
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>user_management.community_user.user_name</code>. Unique
     * username (1-20 characters)
     */
    public void setUserName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>user_management.community_user.user_name</code>. Unique
     * username (1-20 characters)
     */
    public String getUserName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>user_management.community_user.user_password</code>.
     * User password (8-20 characters, store encrypted value)
     */
    public void setUserPassword(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>user_management.community_user.user_password</code>.
     * User password (8-20 characters, store encrypted value)
     */
    public String getUserPassword() {
        return (String) get(4);
    }

    /**
     * Setter for <code>user_management.community_user.gender</code>. User
     * gender (0: male, 1: female)
     */
    public void setGender(UByte value) {
        set(5, value);
    }

    /**
     * Getter for <code>user_management.community_user.gender</code>. User
     * gender (0: male, 1: female)
     */
    public UByte getGender() {
        return (UByte) get(5);
    }

    /**
     * Setter for <code>user_management.community_user.user_type</code>. Type of
     * the user (REGULAR, OFFICIAL, KOL)
     */
    public void setUserType(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>user_management.community_user.user_type</code>. Type of
     * the user (REGULAR, OFFICIAL, KOL)
     */
    public String getUserType() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommunityUserRecord
     */
    public CommunityUserRecord() {
        super(CommunityUser.COMMUNITY_USER);
    }

    /**
     * Create a detached, initialised CommunityUserRecord
     */
    public CommunityUserRecord(Integer id, LocalDateTime createTime, LocalDateTime updateTime, String userName, String userPassword, UByte gender, String userType) {
        super(CommunityUser.COMMUNITY_USER);

        setId(id);
        setCreateTime(createTime);
        setUpdateTime(updateTime);
        setUserName(userName);
        setUserPassword(userPassword);
        setGender(gender);
        setUserType(userType);
        resetChangedOnNotNull();
    }
}
