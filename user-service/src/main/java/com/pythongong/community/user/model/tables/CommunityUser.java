/*
 * This file is generated by jOOQ.
 */
package com.pythongong.community.user.model.tables;

import com.pythongong.community.user.model.Indexes;
import com.pythongong.community.user.model.Keys;
import com.pythongong.community.user.model.UserManagement;
import com.pythongong.community.user.model.tables.records.CommunityUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;

/**
 * Stores information about registered users of the application.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommunityUser extends TableImpl<CommunityUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_management.community_user</code>
     */
    public static final CommunityUser COMMUNITY_USER = new CommunityUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommunityUserRecord> getRecordType() {
        return CommunityUserRecord.class;
    }

    /**
     * The column <code>user_management.community_user.id</code>. Unique
     * auto-incrementing integer identifier for each user
     */
    public final TableField<CommunityUserRecord, Integer> ID = createField(DSL.name("id"),
            SQLDataType.INTEGER.nullable(false).identity(true), this,
            "Unique auto-incrementing integer identifier for each user");

    /**
     * The column <code>user_management.community_user.create_time</code>.
     * Timestamp of user record creation
     */
    public final TableField<CommunityUserRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"),
            SQLDataType.LOCALDATETIME(0).nullable(false)
                    .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)),
            this, "Timestamp of user record creation");

    /**
     * The column <code>user_management.community_user.update_time</code>.
     * Timestamp of last user record update
     */
    public final TableField<CommunityUserRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"),
            SQLDataType.LOCALDATETIME(0).nullable(false)
                    .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)),
            this, "Timestamp of last user record update");

    /**
     * The column <code>user_management.community_user.user_name</code>. Unique
     * username (1-20 characters)
     */
    public final TableField<CommunityUserRecord, String> USER_NAME = createField(DSL.name("user_name"),
            SQLDataType.VARCHAR(20).nullable(false), this, "Unique username (1-20 characters)");

    /**
     * The column <code>user_management.community_user.user_password</code>.
     * User password (8-20 characters, store encrypted value)
     */
    public final TableField<CommunityUserRecord, String> USER_PASSWORD = createField(DSL.name("user_password"),
            SQLDataType.VARCHAR(100).nullable(false), this, "User password (8-20 characters, store encrypted value)");

    /**
     * The column <code>user_management.community_user.gender</code>. User
     * gender (0: male, 1: female)
     */
    public final TableField<CommunityUserRecord, UByte> GENDER = createField(DSL.name("gender"),
            SQLDataType.TINYINTUNSIGNED.nullable(false), this, "User gender (0: male, 1: female)");

    /**
     * The column <code>user_management.community_user.user_type</code>. Type of
     * the user (REGULAR, OFFICIAL, KOL)
     */
    public final TableField<CommunityUserRecord, String> USER_TYPE = createField(DSL.name("user_type"),
            SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.inline("REGULAR", SQLDataType.VARCHAR)), this,
            "Type of the user (REGULAR, OFFICIAL, KOL)");

    private CommunityUser(Name alias, Table<CommunityUserRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CommunityUser(Name alias, Table<CommunityUserRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters,
                DSL.comment("Stores information about registered users of the application."), TableOptions.table(),
                where);
    }

    /**
     * Create an aliased <code>user_management.community_user</code> table
     * reference
     */
    public CommunityUser(String alias) {
        this(DSL.name(alias), COMMUNITY_USER);
    }

    /**
     * Create an aliased <code>user_management.community_user</code> table
     * reference
     */
    public CommunityUser(Name alias) {
        this(alias, COMMUNITY_USER);
    }

    /**
     * Create a <code>user_management.community_user</code> table reference
     */
    public CommunityUser() {
        this(DSL.name("community_user"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : UserManagement.USER_MANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.COMMUNITY_USER_IDX_USER_TYPE);
    }

    @Override
    public Identity<CommunityUserRecord, Integer> getIdentity() {
        return (Identity<CommunityUserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CommunityUserRecord> getPrimaryKey() {
        return Keys.KEY_COMMUNITY_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<CommunityUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_COMMUNITY_USER_UK_USERNAME);
    }

    @Override
    public CommunityUser as(String alias) {
        return new CommunityUser(DSL.name(alias), this);
    }

    @Override
    public CommunityUser as(Name alias) {
        return new CommunityUser(alias, this);
    }

    @Override
    public CommunityUser as(Table<?> alias) {
        return new CommunityUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommunityUser rename(String name) {
        return new CommunityUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommunityUser rename(Name name) {
        return new CommunityUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommunityUser rename(Table<?> name) {
        return new CommunityUser(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommunityUser where(Condition condition) {
        return new CommunityUser(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommunityUser where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommunityUser where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommunityUser where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommunityUser where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommunityUser where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommunityUser where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommunityUser where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommunityUser whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommunityUser whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
